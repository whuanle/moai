/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createBusinessValidationResultFromDiscriminatorValue, createQueryUserListCommandResponseFromDiscriminatorValue, serializeQueryUserListCommand, serializeQueryUserListCommandResponse, type BusinessValidationResult, type QueryUserListCommand, type QueryUserListCommandResponse } from '../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/admin/user/user_list
 */
export interface User_listRequestBuilder extends BaseRequestBuilder<User_listRequestBuilder> {
    /**
     * 查询用户列表.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<QueryUserListCommandResponse>}
     * @throws {BusinessValidationResult} error when the service returns a 400 status code
     * @throws {BusinessValidationResult} error when the service returns a 401 status code
     * @throws {BusinessValidationResult} error when the service returns a 403 status code
     * @throws {BusinessValidationResult} error when the service returns a 409 status code
     * @throws {BusinessValidationResult} error when the service returns a 500 status code
     */
     post(body: QueryUserListCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<QueryUserListCommandResponse | undefined>;
    /**
     * 查询用户列表.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: QueryUserListCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const User_listRequestBuilderUriTemplate = "{+baseurl}/api/admin/user/user_list";
/**
 * Metadata for all the requests in the request builder.
 */
export const User_listRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: User_listRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            409: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createQueryUserListCommandResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeQueryUserListCommand,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */

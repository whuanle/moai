/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createBusinessValidationResultFromDiscriminatorValue, createQueryWikiConfigInfoCommandResponseFromDiscriminatorValue, type BusinessValidationResult, type QueryWikiConfigInfoCommandResponse } from '../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/wiki/web/query_crawle_config
 */
export interface Query_crawle_configRequestBuilder extends BaseRequestBuilder<Query_crawle_configRequestBuilder> {
    /**
     * 获取爬虫配置详细信息.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<QueryWikiConfigInfoCommandResponse>}
     * @throws {BusinessValidationResult} error when the service returns a 400 status code
     * @throws {BusinessValidationResult} error when the service returns a 401 status code
     * @throws {BusinessValidationResult} error when the service returns a 403 status code
     * @throws {BusinessValidationResult} error when the service returns a 409 status code
     * @throws {BusinessValidationResult} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<Query_crawle_configRequestBuilderGetQueryParameters> | undefined) : Promise<QueryWikiConfigInfoCommandResponse | undefined>;
    /**
     * 获取爬虫配置详细信息.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<Query_crawle_configRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * 获取爬虫配置详细信息.
 */
export interface Query_crawle_configRequestBuilderGetQueryParameters {
    /**
     * 知识库id.
     */
    wikiId?: number;
    /**
     * id.
     */
    wikiWebConfigId?: number;
}
/**
 * Uri template for the request builder.
 */
export const Query_crawle_configRequestBuilderUriTemplate = "{+baseurl}/api/wiki/web/query_crawle_config?WikiId={WikiId}&WikiWebConfigId={WikiWebConfigId}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const Query_crawle_configRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "wikiId": "WikiId",
    "wikiWebConfigId": "WikiWebConfigId",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Query_crawle_configRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: Query_crawle_configRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            409: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createQueryWikiConfigInfoCommandResponseFromDiscriminatorValue,
        queryParametersMapper: Query_crawle_configRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */

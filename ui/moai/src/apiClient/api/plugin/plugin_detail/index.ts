/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createBusinessValidationResultFromDiscriminatorValue, createQueryPluginDetailCommandResponseFromDiscriminatorValue, serializeQueryPluginDetailCommand, serializeQueryPluginDetailCommandResponse, type BusinessValidationResult, type QueryPluginDetailCommand, type QueryPluginDetailCommandResponse } from '../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/plugin/plugin_detail
 */
export interface Plugin_detailRequestBuilder extends BaseRequestBuilder<Plugin_detailRequestBuilder> {
    /**
     * 获取插件的详细信息.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<QueryPluginDetailCommandResponse>}
     * @throws {BusinessValidationResult} error when the service returns a 400 status code
     * @throws {BusinessValidationResult} error when the service returns a 401 status code
     * @throws {BusinessValidationResult} error when the service returns a 403 status code
     * @throws {BusinessValidationResult} error when the service returns a 409 status code
     * @throws {BusinessValidationResult} error when the service returns a 500 status code
     */
     post(body: QueryPluginDetailCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<QueryPluginDetailCommandResponse | undefined>;
    /**
     * 获取插件的详细信息.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: QueryPluginDetailCommand, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const Plugin_detailRequestBuilderUriTemplate = "{+baseurl}/api/plugin/plugin_detail";
/**
 * Metadata for all the requests in the request builder.
 */
export const Plugin_detailRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: Plugin_detailRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            409: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createQueryPluginDetailCommandResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeQueryPluginDetailCommand,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */

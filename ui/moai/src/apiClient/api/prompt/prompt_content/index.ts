/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createBusinessValidationResultFromDiscriminatorValue, createPromptItemFromDiscriminatorValue, type BusinessValidationResult, type PromptItem } from '../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/prompt/prompt_content
 */
export interface Prompt_contentRequestBuilder extends BaseRequestBuilder<Prompt_contentRequestBuilder> {
    /**
     * 获取提示词内容.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PromptItem>}
     * @throws {BusinessValidationResult} error when the service returns a 400 status code
     * @throws {BusinessValidationResult} error when the service returns a 401 status code
     * @throws {BusinessValidationResult} error when the service returns a 403 status code
     * @throws {BusinessValidationResult} error when the service returns a 409 status code
     * @throws {BusinessValidationResult} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<Prompt_contentRequestBuilderGetQueryParameters> | undefined) : Promise<PromptItem | undefined>;
    /**
     * 获取提示词内容.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<Prompt_contentRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * 获取提示词内容.
 */
export interface Prompt_contentRequestBuilderGetQueryParameters {
    /**
     * 提示词 id.
     */
    promptId?: number;
    /**
     * 用户 id.
     */
    userId?: number;
}
/**
 * Uri template for the request builder.
 */
export const Prompt_contentRequestBuilderUriTemplate = "{+baseurl}/api/prompt/prompt_content?PromptId={PromptId}&UserId={UserId}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const Prompt_contentRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "promptId": "PromptId",
    "userId": "UserId",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const Prompt_contentRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: Prompt_contentRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            409: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createBusinessValidationResultFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPromptItemFromDiscriminatorValue,
        queryParametersMapper: Prompt_contentRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
